var path = require('path');

module.exports = {
    entry: './index.js',
    output: {
        filename: 'bundle.js'       
    },

    // This allows us to non-relative paths in `require` statements. All
    // `require`s become relative to the root of this entire project.
    resolve: {
        root: __dirname,
        extensions: ['', '.js']
    },

    // These are loaders for precompiling files.
    module: {
        loaders: [
            // For jsx and es6 parsing.
            { 
                test: /\.js$/, 
                loader: 'babel-loader',
                exclude: /node_modules/,
                query: {
                    plugins: [
                        'transform-runtime',
                        'transform-object-rest-spread',
                        'transform-object-assign'
                    ],
                    presets: ['es2015', 'react', 'stage-2']
                }
            },

            // For css files.
            {
                test: /\.css$/,
                loader: 'style!css' // Run both loaders
            },

            // For less files.
            {
                test: /\.less$/,
                loaders: ['style', 'css', 'less']
            },

            // For woff files provided by font-awesome and bootstrap.
            {
                test: /\.woff(2)?(\?v=[0-9]\.[0-9]\.[0-9])?$/,
                loader: 'url-loader',
                query: {
                    limit: '10000',
                    mimetype: 'application/font-woff',
                    name: 'images/[name].bundle.[ext]'
                }
            },

            // For ttf, eot, and svg files provided by font-awesome and
            // bootstrap.
            {
                test: /\.(ttf|eot|svg|gif)(\?v=[0-9]\.[0-9]\.[0-9])?$/,
                loader: 'file-loader',
                query: { name: 'images/[name].bundle.[ext]' }
            },

            // For json files.
            { test: /\.json$/, loader: 'json-loader' }
        ]
    },

    // Plugins for optimizing the bundling process.
    plugins: [
        // Subsequent files replace this.
    ]
};